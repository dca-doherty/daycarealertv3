/**
 * Analyze Daycare Cost Estimates (V2)
 * 
 * This script analyzes the enhanced cost estimates generated by the V2 model
 * and provides detailed insights into pricing patterns.
 */
require('dotenv').config();
const mysql = require('mysql2/promise');

// Database configuration
const dbConfig = {
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME
};

async function analyzeResults() {
  const pool = await mysql.createPool(dbConfig);
  
  try {
    // Get overall statistics
    const [overallStats] = await pool.query(`
      SELECT 
        COUNT(*) as total_estimates,
        MIN(monthly_cost) as min_cost,
        MAX(monthly_cost) as max_cost,
        AVG(monthly_cost) as avg_cost,
        STDDEV(monthly_cost) as std_dev,
        MIN(weekly_cost) as min_weekly,
        MAX(weekly_cost) as max_weekly,
        AVG(weekly_cost) as avg_weekly
      FROM 
        daycare_cost_estimates
    `);
    
    console.log('Overall Cost Statistics:');
    console.table(overallStats);
    
    // Get distribution by cost ranges
    const [costRanges] = await pool.query(`
      SELECT 
        CASE 
          WHEN monthly_cost < 800 THEN 'Under $800'
          WHEN monthly_cost < 1000 THEN '$800-$999'
          WHEN monthly_cost < 1200 THEN '$1000-$1199'
          WHEN monthly_cost < 1400 THEN '$1200-$1399'
          WHEN monthly_cost < 1600 THEN '$1400-$1599'
          WHEN monthly_cost < 1800 THEN '$1600-$1799'
          WHEN monthly_cost < 2000 THEN '$1800-$1999'
          WHEN monthly_cost < 2200 THEN '$2000-$2199'
          WHEN monthly_cost < 2400 THEN '$2200-$2399'
          WHEN monthly_cost < 2600 THEN '$2400-$2599'
          WHEN monthly_cost < 2800 THEN '$2600-$2799'
          WHEN monthly_cost < 3000 THEN '$2800-$2999'
          ELSE '$3000+'
        END as cost_range,
        COUNT(*) as count,
        ROUND(COUNT(*) / (SELECT COUNT(*) FROM daycare_cost_estimates) * 100, 2) as percentage,
        ROUND(AVG(monthly_cost), 2) as avg_cost,
        ROUND(AVG(weekly_cost), 2) as avg_weekly
      FROM 
        daycare_cost_estimates
      GROUP BY 
        cost_range
      ORDER BY 
        MIN(monthly_cost)
    `);
    
    console.log('\nCost Distribution:');
    console.table(costRanges);
    
    // Analyze by operation type
    const [typeAnalysis] = await pool.query(`
      SELECT 
        d.OPERATION_TYPE, 
        COUNT(*) as count,
        ROUND(AVG(c.monthly_cost), 2) as avg_cost,
        ROUND(AVG(c.weekly_cost), 2) as avg_weekly,
        MIN(c.monthly_cost) as min_cost,
        MAX(c.monthly_cost) as max_cost
      FROM 
        daycare_cost_estimates c
      JOIN 
        daycare_operations d ON c.operation_id = d.OPERATION_ID
      GROUP BY 
        d.OPERATION_TYPE
      HAVING 
        COUNT(*) > 10
      ORDER BY 
        avg_cost DESC
      LIMIT 15
    `);
    
    console.log('\nCost by Operation Type (Top 15):');
    console.table(typeAnalysis);
    
    // Analyze by age groups served
    const [ageAnalysis] = await pool.query(`
      SELECT 
        CASE 
          WHEN d.LICENSED_TO_SERVE_AGES LIKE '%infant%' THEN 'Includes Infants'
          WHEN d.LICENSED_TO_SERVE_AGES LIKE '%toddler%' THEN 'Includes Toddlers'
          WHEN d.LICENSED_TO_SERVE_AGES LIKE '%preschool%' OR 
               d.LICENSED_TO_SERVE_AGES LIKE '%pre-k%' OR 
               d.LICENSED_TO_SERVE_AGES LIKE '%pre k%' THEN 'Includes Preschool'
          ELSE 'School-Age Only/Unknown'
        END as age_group,
        COUNT(*) as count,
        ROUND(AVG(c.monthly_cost), 2) as avg_cost,
        ROUND(AVG(c.weekly_cost), 2) as avg_weekly,
        MIN(c.monthly_cost) as min_cost,
        MAX(c.monthly_cost) as max_cost
      FROM 
        daycare_cost_estimates c
      JOIN 
        daycare_operations d ON c.operation_id = d.OPERATION_ID
      GROUP BY 
        age_group
      ORDER BY 
        avg_cost DESC
    `);
    
    console.log('\nCost by Age Groups:');
    console.table(ageAnalysis);
    
    // Analyze by location (counties)
    const [locationAnalysis] = await pool.query(`
      SELECT 
        d.COUNTY, 
        COUNT(*) as count,
        ROUND(AVG(c.monthly_cost), 2) as avg_cost,
        ROUND(AVG(c.weekly_cost), 2) as avg_weekly,
        MIN(c.monthly_cost) as min_cost,
        MAX(c.monthly_cost) as max_cost
      FROM 
        daycare_cost_estimates c
      JOIN 
        daycare_operations d ON c.operation_id = d.OPERATION_ID
      WHERE 
        d.COUNTY IS NOT NULL
      GROUP BY 
        d.COUNTY
      HAVING 
        COUNT(*) > 20
      ORDER BY 
        avg_cost DESC
      LIMIT 15
    `);
    
    console.log('\nCost by County (Top 15):');
    console.table(locationAnalysis);
    
    // Analysis by capacity
    const [capacityAnalysis] = await pool.query(`
      SELECT 
        CASE 
          WHEN d.TOTAL_CAPACITY < 12 THEN 'Small (<12)'
          WHEN d.TOTAL_CAPACITY < 25 THEN 'Small-Medium (12-24)'
          WHEN d.TOTAL_CAPACITY < 50 THEN 'Medium (25-49)'
          WHEN d.TOTAL_CAPACITY < 100 THEN 'Medium-Large (50-99)'
          WHEN d.TOTAL_CAPACITY >= 100 THEN 'Large (100+)'
          ELSE 'Unknown'
        END as capacity_range,
        COUNT(*) as count,
        ROUND(AVG(c.monthly_cost), 2) as avg_cost,
        ROUND(AVG(c.weekly_cost), 2) as avg_weekly,
        MIN(c.monthly_cost) as min_cost,
        MAX(c.monthly_cost) as max_cost
      FROM 
        daycare_cost_estimates c
      JOIN 
        daycare_operations d ON c.operation_id = d.OPERATION_ID
      GROUP BY 
        capacity_range
      ORDER BY 
        CASE
          WHEN capacity_range = 'Small (<12)' THEN 1
          WHEN capacity_range = 'Small-Medium (12-24)' THEN 2
          WHEN capacity_range = 'Medium (25-49)' THEN 3
          WHEN capacity_range = 'Medium-Large (50-99)' THEN 4
          WHEN capacity_range = 'Large (100+)' THEN 5
          ELSE 6
        END
    `);
    
    console.log('\nCost by Capacity:');
    console.table(capacityAnalysis);
    
    // Analysis by years in operation
    const [experienceAnalysis] = await pool.query(`
      SELECT 
        CASE 
          WHEN DATEDIFF(CURRENT_DATE, d.ISSUANCE_DATE) / 365 < 2 THEN 'New (<2 years)'
          WHEN DATEDIFF(CURRENT_DATE, d.ISSUANCE_DATE) / 365 < 5 THEN '2-5 years'
          WHEN DATEDIFF(CURRENT_DATE, d.ISSUANCE_DATE) / 365 < 10 THEN '5-10 years'
          WHEN DATEDIFF(CURRENT_DATE, d.ISSUANCE_DATE) / 365 < 15 THEN '10-15 years'
          WHEN DATEDIFF(CURRENT_DATE, d.ISSUANCE_DATE) / 365 >= 15 THEN '15+ years'
          ELSE 'Unknown'
        END as experience_range,
        COUNT(*) as count,
        ROUND(AVG(c.monthly_cost), 2) as avg_cost,
        ROUND(AVG(c.weekly_cost), 2) as avg_weekly,
        MIN(c.monthly_cost) as min_cost,
        MAX(c.monthly_cost) as max_cost
      FROM 
        daycare_cost_estimates c
      JOIN 
        daycare_operations d ON c.operation_id = d.OPERATION_ID
      GROUP BY 
        experience_range
      ORDER BY 
        CASE
          WHEN experience_range = 'New (<2 years)' THEN 1
          WHEN experience_range = '2-5 years' THEN 2
          WHEN experience_range = '5-10 years' THEN 3
          WHEN experience_range = '10-15 years' THEN 4
          WHEN experience_range = '15+ years' THEN 5
          ELSE 6
        END
    `);
    
    console.log('\nCost by Experience:');
    console.table(experienceAnalysis);
    
    // Compare with risk scores
    const [riskAnalysis] = await pool.query(`
      SELECT 
        CASE 
          WHEN r.risk_score >= 70 THEN 'High Risk (70+)'
          WHEN r.risk_score >= 40 THEN 'Medium-High Risk (40-69)'
          WHEN r.risk_score >= 20 THEN 'Medium Risk (20-39)'
          WHEN r.risk_score >= 10 THEN 'Low Risk (10-19)'
          WHEN r.risk_score < 10 THEN 'Very Low Risk (<10)'
          ELSE 'Unknown'
        END as risk_category,
        COUNT(*) as count,
        ROUND(AVG(c.monthly_cost), 2) as avg_cost,
        ROUND(AVG(c.weekly_cost), 2) as avg_weekly,
        MIN(c.monthly_cost) as min_cost,
        MAX(c.monthly_cost) as max_cost
      FROM 
        daycare_cost_estimates c
      JOIN 
        risk_analysis r ON c.operation_id = r.operation_id
      GROUP BY 
        risk_category
      ORDER BY 
        CASE
          WHEN risk_category = 'High Risk (70+)' THEN 1
          WHEN risk_category = 'Medium-High Risk (40-69)' THEN 2
          WHEN risk_category = 'Medium Risk (20-39)' THEN 3
          WHEN risk_category = 'Low Risk (10-19)' THEN 4
          WHEN risk_category = 'Very Low Risk (<10)' THEN 5
          ELSE 6
        END
    `);
    
    console.log('\nCost by Risk Category:');
    console.table(riskAnalysis);
    
    // Find Dallas area Montessori schools for comparison with Meadow Oaks
    const [dallasMonetessori] = await pool.query(`
      SELECT 
        d.OPERATION_NAME,
        d.OPERATION_TYPE,
        d.LICENSED_TO_SERVE_AGES,
        d.CITY,
        d.PROGRAMMATIC_SERVICES,
        d.TOTAL_CAPACITY,
        c.monthly_cost,
        c.weekly_cost,
        c.calculation_factors
      FROM 
        daycare_cost_estimates c
      JOIN 
        daycare_operations d ON c.operation_id = d.OPERATION_ID
      WHERE 
        (d.CITY = 'DALLAS' OR d.COUNTY = 'DALLAS')
        AND (d.OPERATION_TYPE = 'Montessori' OR d.PROGRAMMATIC_SERVICES LIKE '%montessori%')
      ORDER BY 
        c.monthly_cost DESC
      LIMIT 5
    `);
    
    console.log('\nDallas Montessori Schools (for comparison with Meadow Oaks):');
    console.table(dallasMonetessori);
    
    // Examine some examples in detail (highest weekly costs)
    const [highCostWeekly] = await pool.query(`
      SELECT 
        d.OPERATION_NAME,
        d.OPERATION_TYPE,
        d.COUNTY,
        d.CITY,
        d.LICENSED_TO_SERVE_AGES,
        d.PROGRAMMATIC_SERVICES,
        d.TOTAL_CAPACITY,
        DATEDIFF(CURRENT_DATE, d.ISSUANCE_DATE) / 365 as years_in_operation,
        r.risk_score,
        c.monthly_cost,
        c.weekly_cost
      FROM 
        daycare_cost_estimates c
      JOIN 
        daycare_operations d ON c.operation_id = d.OPERATION_ID
      LEFT JOIN
        risk_analysis r ON c.operation_id = r.operation_id
      ORDER BY 
        c.weekly_cost DESC
      LIMIT 3
    `);
    
    console.log('\nHighest Weekly Cost Examples:');
    console.table(highCostWeekly);
    
    // Check if the model's estimates align with market rates
    console.log('\nComparison with Market Rates:');
    console.log('- Meadow Oaks Montessori (Dallas): $425/week (your son\'s daycare)');
    console.log(`- Our model's Dallas Montessori average: ~$${Math.round(dallasMonetessori.reduce((sum, d) => sum + parseFloat(d.weekly_cost), 0) / dallasMonetessori.length)}/week`);
    console.log('- National average for childcare: ~$200-$300/week');
    console.log('- Infant care in major cities: ~$300-$450/week');
    console.log('- Toddler care in major cities: ~$250-$350/week');
    console.log('- Preschool: ~$200-$300/week');
    console.log('- After-school care: ~$100-$200/week');
    
    console.log('\nModel Evaluation:');
    console.log('- Our estimates range from $' + Math.round(overallStats[0].min_weekly) + '/week to $' + Math.round(overallStats[0].max_weekly) + '/week');
    console.log('- Average weekly estimate: $' + Math.round(overallStats[0].avg_weekly));
    console.log('- Standard deviation: $' + Math.round(overallStats[0].std_dev / 4.33)); // Convert monthly std dev to weekly
    
    // Calculate how well the model aligns with expected industry patterns
    console.log('\nAlignment with Expected Patterns:');
    
    // Check if infant care costs more than school-age
    if (ageAnalysis[0].age_group === 'Includes Infants' && ageAnalysis[0].avg_cost > ageAnalysis[ageAnalysis.length-1].avg_cost) {
      console.log('✓ Infant care correctly costs more than care for older children');
      console.log(`  (${Math.round(ageAnalysis[0].avg_weekly)} vs. ${Math.round(ageAnalysis[ageAnalysis.length-1].avg_weekly)} per week)`);
    } else {
      console.log('✗ Unexpected pattern: Infant care does not show expected premium');
    }
    
    // Check if high-income counties have higher costs
    if (locationAnalysis[0].avg_cost > locationAnalysis[locationAnalysis.length-1].avg_cost) {
      console.log('✓ Higher-income counties show higher costs as expected');
      console.log(`  (${locationAnalysis[0].COUNTY}: $${Math.round(locationAnalysis[0].avg_weekly)}/week vs. ${locationAnalysis[locationAnalysis.length-1].COUNTY}: $${Math.round(locationAnalysis[locationAnalysis.length-1].avg_weekly)}/week)`);
    } else {
      console.log('✗ Unexpected pattern: Location-based pricing shows anomalies');
    }
    
    // Check if higher risk facilities have lower costs
    if (riskAnalysis[0].avg_cost < riskAnalysis[riskAnalysis.length-1].avg_cost) {
      console.log('✓ Higher-risk facilities correctly show lower costs');
      console.log(`  (High Risk: $${Math.round(riskAnalysis[0].avg_weekly)}/week vs. Very Low Risk: $${Math.round(riskAnalysis[riskAnalysis.length-1].avg_weekly)}/week)`);
    } else {
      console.log('✗ Unexpected pattern: Risk-based discounts not appearing as expected');
    }
    
    // Check if larger facilities have economies of scale
    const smallFacilitiesIdx = capacityAnalysis.findIndex(a => a.capacity_range === 'Small (<12)');
    const largeFacilitiesIdx = capacityAnalysis.findIndex(a => a.capacity_range === 'Large (100+)');
    
    if (smallFacilitiesIdx >= 0 && largeFacilitiesIdx >= 0 && 
        capacityAnalysis[smallFacilitiesIdx].avg_cost > capacityAnalysis[largeFacilitiesIdx].avg_cost) {
      console.log('✓ Smaller facilities correctly cost more per child than larger ones');
      console.log(`  (Small facilities: $${Math.round(capacityAnalysis[smallFacilitiesIdx].avg_weekly)}/week vs. Large facilities: $${Math.round(capacityAnalysis[largeFacilitiesIdx].avg_weekly)}/week)`);
    } else {
      console.log('✗ Unexpected pattern: Capacity-based economies of scale not visible');
    }
    
    // Check if more experienced providers cost more
    const newFacilitiesIdx = experienceAnalysis.findIndex(a => a.experience_range === 'New (<2 years)');
    const experiencedFacilitiesIdx = experienceAnalysis.findIndex(a => a.experience_range === '15+ years');
    
    if (newFacilitiesIdx >= 0 && experiencedFacilitiesIdx >= 0 && 
        experienceAnalysis[experiencedFacilitiesIdx].avg_cost > experienceAnalysis[newFacilitiesIdx].avg_cost) {
      console.log('✓ More experienced providers correctly show higher costs');
      console.log(`  (15+ years: $${Math.round(experienceAnalysis[experiencedFacilitiesIdx].avg_weekly)}/week vs. New facilities: $${Math.round(experienceAnalysis[newFacilitiesIdx].avg_weekly)}/week)`);
    } else {
      console.log('✗ Unexpected pattern: Experience-based pricing shows anomalies');
    }
    
    // Validate against Meadow Oaks real-world example
    console.log('\nValidation against Meadow Oaks (real-world example):');
    console.log('- Actual weekly cost: $425');
    console.log(`- Model's estimate for similar daycares: ~$${Math.round(dallasMonetessori.reduce((sum, d) => sum + parseFloat(d.weekly_cost), 0) / dallasMonetessori.length)}`);
    console.log(`- Accuracy: ${Math.round((1 - Math.abs(425 - (dallasMonetessori.reduce((sum, d) => sum + parseFloat(d.weekly_cost), 0) / dallasMonetessori.length)) / 425) * 100)}%`);
    
  } catch (err) {
    console.error('Analysis error:', err);
  } finally {
    await pool.end();
  }
}

// Run the analysis
analyzeResults().catch(console.error);