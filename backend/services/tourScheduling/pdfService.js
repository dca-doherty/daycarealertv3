const PDFDocument = require('pdfkit');
const { pool } = require('../../config/db');

class PDFService {
  /**
   * Generate combined PDF profiles for all selected daycares
   */
  async generateDaycareProfilesPDF(operationIds) {
    const doc = new PDFDocument({ size: 'LETTER', margin: 50 });
    
    for (let i = 0; i < operationIds.length; i++) {
      const daycare = await this.getDaycareDetails(operationIds[i]);
      
      if (i > 0) {
        doc.addPage();
      }
      
      this.addDaycareProfileToDocument(doc, daycare, i + 1, operationIds.length);
    }
    
    doc.end();
    return doc;
  }
  
  /**
   * Get complete daycare details
   */
  async getDaycareDetails(operationId) {
    const [daycares] = await pool.query(
      `SELECT * FROM child_care_operations WHERE operation_id = ?`,
      [operationId]
    );
    
    if (daycares.length === 0) {
      return null;
    }
    
    const daycare = daycares[0];
    
    // Get rating from ratings view
    const [ratings] = await pool.query(
      `SELECT * FROM daycare_ratings_balanced_view WHERE OPERATION_ID = ?`,
      [operationId]
    );
    
    if (ratings.length > 0) {
      daycare.rating = ratings[0];
    }
    
    // Get recent violations
    const [violations] = await pool.query(
      `SELECT * FROM violations 
       WHERE operation_number = ? 
       ORDER BY inspection_visit_date DESC 
       LIMIT 10`,
      [operationId]
    );
    
    daycare.violations = violations;
    
    return daycare;
  }
  
  /**
   * Add daycare profile page to PDF document
   */
  addDaycareProfileToDocument(doc, daycare, pageNum, totalPages) {
    const { operation_name, operation_type, location_address, city, county, 
            phone_number, email_address, total_capacity, rating, violations } = daycare;
    
    // Header
    doc.fontSize(24).fillColor('#4CAF50').text(operation_name, { align: 'center' });
    doc.fontSize(12).fillColor('#666').text(`Page ${pageNum} of ${totalPages}`, { align: 'center' });
    doc.moveDown();
    
    // Basic Info Section
    doc.fontSize(16).fillColor('#333').text('Basic Information');
    doc.moveTo(50, doc.y).lineTo(550, doc.y).stroke('#4CAF50');
    doc.moveDown(0.5);
    
    doc.fontSize(11).fillColor('#000');
    this.addInfoRow(doc, 'Type:', operation_type);
    this.addInfoRow(doc, 'Address:', `${location_address}, ${city}, ${county}`);
    this.addInfoRow(doc, 'Phone:', phone_number);
    this.addInfoRow(doc, 'Email:', email_address);
    this.addInfoRow(doc, 'Capacity:', `${total_capacity} children`);
    doc.moveDown();
    
    // Rating Section
    if (rating) {
      doc.fontSize(16).fillColor('#333').text('Safety Rating');
      doc.moveTo(50, doc.y).lineTo(550, doc.y).stroke('#4CAF50');
      doc.moveDown(0.5);
      
      const stars = '★'.repeat(Math.round(rating.overall_rating || 0));
      const emptyStars = '☆'.repeat(5 - Math.round(rating.overall_rating || 0));
      doc.fontSize(20).fillColor('#FFD700').text(stars + emptyStars);
      doc.fontSize(11).fillColor('#000').text(`Overall Rating: ${rating.overall_rating}/5.0`);
      doc.moveDown();
    }
    
    // Violations Summary
    doc.fontSize(16).fillColor('#333').text('Recent Violations');
    doc.moveTo(50, doc.y).lineTo(550, doc.y).stroke('#4CAF50');
    doc.moveDown(0.5);
    
    if (violations && violations.length > 0) {
      doc.fontSize(10);
      violations.slice(0, 5).forEach((violation, index) => {
        doc.fillColor('#666').text(`${index + 1}. ${violation.standard_violated || 'Standard violated'}`, {
          continued: false
        });
        doc.fillColor('#999').text(`   Risk: ${violation.risk_level || 'Unknown'} | Date: ${violation.inspection_visit_date || 'N/A'}`, {
          continued: false
        });
        doc.moveDown(0.3);
      });
    } else {
      doc.fontSize(11).fillColor('#666').text('No recent violations on record');
    }
    doc.moveDown();
    
    // Footer
    doc.fontSize(9).fillColor('#999').text(
      'Generated by DaycareAlert.com - For more details, visit https://daycarealert.com',
      50, doc.page.height - 50,
      { align: 'center' }
    );
  }
  
  addInfoRow(doc, label, value) {
    doc.font('Helvetica-Bold').text(label, { continued: true, width: 100 });
    doc.font('Helvetica').text(` ${value || 'N/A'}`);
  }
}

module.exports = new PDFService();
