/**
 * Table Headers Fix - v2.0
 * UPDATED to fix errors and ensure the Est. Price and Years headers always display
 * Even when the sortable functionality is removed
 */

(function() {
  console.log('Table Headers Fix v2.0 initializing');
  
  // Only initialize observer if document is ready
  function initializeWhenReady() {
    if (document.readyState === 'loading') {
      // Document not yet ready, wait for it
      document.addEventListener('DOMContentLoaded', initializeObserver);
      // Also run the fixes immediately and with delays
      runFixesWithDelays();
    } else {
      // Document is ready, initialize now
      initializeObserver();
      // Also run the fixes immediately and with delays
      runFixesWithDelays();
    }
  }
  
  // Helper to run fixes with various delays
  function runFixesWithDelays() {
    fixTableHeaders(); // Immediate
    setTimeout(fixTableHeaders, 100);
    setTimeout(fixTableHeaders, 500);
    setTimeout(fixTableHeaders, 1000);
  }
  
  // Set up observer for SPA navigation and React rendering
  function initializeObserver() {
    if (!document.body) {
      console.warn('Table Headers Fix: document.body not available yet');
      setTimeout(initializeObserver, 500);
      return;
    }
    
    try {
      const observer = new MutationObserver((mutations) => {
        let shouldFix = false;
        
        for (const mutation of mutations) {
          if (mutation.type === 'childList') {
            // Look for table headers being added
            const headers = document.querySelectorAll('th');
            if (headers.length > 0) {
              shouldFix = true;
              break;
            }
            
            // Also check for specific table elements
            const tables = document.querySelectorAll('.table, .responsive-table');
            if (tables.length > 0) {
              shouldFix = true;
              break;
            }
          }
        }
        
        if (shouldFix) {
          fixTableHeaders();
        }
      });
      
      // Start observing
      observer.observe(document.body, { childList: true, subtree: true });
      console.log('Table Headers Fix: Observer initialized successfully');
    } catch (error) {
      console.error('Table Headers Fix: Error initializing observer:', error);
    }
  }
  
  // Initialize when ready
  initializeWhenReady();
  
  // Track URL changes for SPA
  let lastUrl = location.href;
  setInterval(() => {
    if (lastUrl !== location.href) {
      lastUrl = location.href;
      // Run fixes after navigation
      setTimeout(fixTableHeaders, 500);
      setTimeout(fixTableHeaders, 1000);
    }
  }, 500);
  
  // Main fix function
  function fixTableHeaders() {
    try {
      console.log('Running table headers fix');
      
      // Look for Est. Price and Years headers by position
      const priceHeaderElements = [];
      const yearsHeaderElements = [];
      
      // Add headers from common positions (4th and 5th columns)
      try {
        const fourthColHeaders = document.querySelectorAll('th:nth-child(5) .header, th:nth-child(5) div:not(.sortable-header)');
        const fifthColHeaders = document.querySelectorAll('th:nth-child(6) .header, th:nth-child(6) div:not(.sortable-header)');
        
        fourthColHeaders.forEach(el => priceHeaderElements.push(el));
        fifthColHeaders.forEach(el => yearsHeaderElements.push(el));
      } catch (e) {
        console.warn('Error selecting by column position:', e);
      }
      
      // Also find headers by examining text content of all th > div elements
      try {
        const allHeaderDivs = document.querySelectorAll('th div');
        allHeaderDivs.forEach(div => {
          const text = div.textContent ? div.textContent.trim() : '';
          if (text.includes('Est. Price') || text.includes('Monthly Cost')) {
            priceHeaderElements.push(div);
          }
          if (text.includes('Years')) {
            yearsHeaderElements.push(div);
          }
        });
      } catch (e) {
        console.warn('Error finding headers by text content:', e);
      }
    
    // If no elements found through selectors, look for headers by their nearby siblings
    if (priceHeaderElements.length === 0 || yearsHeaderElements.length === 0) {
      // Look at all headers
      const allHeaders = document.querySelectorAll('th');
      
      allHeaders.forEach(header => {
        const headerText = header.textContent.trim();
        
        // Check for price-related headers
        if (headerText.includes('Price') || headerText.includes('Cost') || headerText.includes('$')) {
          const headerDiv = header.querySelector('div');
          if (headerDiv && !headerDiv.classList.contains('sortable-header')) {
            priceHeaderElements.push(headerDiv);
          }
        }
        
        // Check for years-related headers
        if (headerText.includes('Year')) {
          const headerDiv = header.querySelector('div');
          if (headerDiv && !headerDiv.classList.contains('sortable-header')) {
            yearsHeaderElements.push(headerDiv);
          }
        }
      });
    }
    
    // Process all found headers
    [...priceHeaderElements, ...yearsHeaderElements].forEach(headerElement => {
      if (!headerElement) return;
      
      // Make sure the header is visible
      headerElement.style.display = 'block';
      headerElement.style.visibility = 'visible';
      headerElement.style.opacity = '1';
      
      // Add proper styling
      headerElement.classList.add('header');
      
      // Fix font weight and cursor
      headerElement.style.fontWeight = 'bold';
      headerElement.style.cursor = 'default';
      
      // Add padding
      headerElement.style.padding = '8px';
      
      // Explicitly set text color
      headerElement.style.color = '#333';
      
      // Stop propagation of click events to prevent sort attempts
      headerElement.addEventListener('click', (e) => {
        e.stopPropagation();
      });
      
      // Ensure parent th doesn't have click handler
      const parentTh = headerElement.closest('th');
      if (parentTh) {
        parentTh.style.cursor = 'default';
        
        // Clone and replace to remove event listeners
        const newTh = parentTh.cloneNode(true);
        parentTh.parentNode.replaceChild(newTh, parentTh);
      }
    });
    
    // Direct fix approach - add custom headers if needed
    const tableHeaders = document.querySelectorAll('th');
    for (const th of tableHeaders) {
      const thText = th.textContent.trim();
      
      if (thText.includes('Est. Price') || thText.includes('Monthly Cost')) {
        if (!th.querySelector('.header') && !th.querySelector('.sortable-header')) {
          // Create a proper header
          const headerDiv = document.createElement('div');
          headerDiv.className = 'header';
          headerDiv.textContent = thText;
          headerDiv.style.display = 'block';
          headerDiv.style.visibility = 'visible';
          headerDiv.style.opacity = '1';
          headerDiv.style.fontWeight = 'bold';
          headerDiv.style.padding = '8px';
          headerDiv.style.color = '#333';
          
          // Clear the th and add the new header
          th.textContent = '';
          th.appendChild(headerDiv);
          
          // Remove click handler from th
          th.style.cursor = 'default';
          const newTh = th.cloneNode(true);
          th.parentNode.replaceChild(newTh, th);
        }
      }
      
      if (thText.includes('Years')) {
        if (!th.querySelector('.header') && !th.querySelector('.sortable-header')) {
          // Create a proper header
          const headerDiv = document.createElement('div');
          headerDiv.className = 'header';
          headerDiv.textContent = thText;
          headerDiv.style.display = 'block';
          headerDiv.style.visibility = 'visible';
          headerDiv.style.opacity = '1';
          headerDiv.style.fontWeight = 'bold';
          headerDiv.style.padding = '8px';
          headerDiv.style.color = '#333';
          
          // Clear the th and add the new header
          th.textContent = '';
          th.appendChild(headerDiv);
          
          // Remove click handler from th
          th.style.cursor = 'default';
          const newTh = th.cloneNode(true);
          th.parentNode.replaceChild(newTh, th);
        }
      }
    }
  }
  } catch (error) {
    console.error("Table Headers Fix: Error in fixTableHeaders:", error);
  }
  
  // Add CSS to ensure headers are visible
  try {
    const style = document.createElement('style');
    style.textContent = `
      /* Ensure headers are visible */
      th .header,
      th div:not(.sortable-header) {
        display: block !important;
        visibility: visible !important;
        opacity: 1 !important;
        font-weight: bold !important;
        padding: 8px !important;
        cursor: default !important;
        color: #333 !important;
      }
      
      /* Fix missing Est. Price and Years headers */
      th:nth-child(5) .header,
      th:nth-child(6) .header {
        display: block !important;
        visibility: visible !important;
        opacity: 1 !important;
        color: #333 !important;
      }
      
      /* Target all potential header positions */
      th:nth-child(4) .header,
      th:nth-child(5) .header,
      th:nth-child(6) .header,
      th:nth-child(7) .header {
        display: block !important;
        visibility: visible !important;
        opacity: 1 !important;
        color: #333 !important;
      }
    `;
    
    document.head.appendChild(style);
    console.log('Table Headers Fix: Added CSS style to document');
  } catch (error) {
    console.error('Table Headers Fix: Error adding CSS style:', error);
  }
})();
